from __future__ import annotations

from typing import Dict
from abc import ABC, abstractmethod

import aiohttp
import asyncio

from ubii.proto.clients.client_pb_plus import Client, ClientList
from ubii.proto.devices.device_pb_plus import Device, DeviceList
from ubii.proto.general.success_pb_plus import Success
from ubii.proto.servers.server_pb_plus import Server
from ubii.proto.sessions.session_pb_plus import Session


class IDeviceManager(ABC):
    @property
    @abstractmethod
    def devices(self) -> DeviceList: ...

    @abstractmethod
    async def register_device(self, device: Device): ...

    @abstractmethod
    async def unregister_device(self, device: Device): ...


class IClientNode(IDeviceManager, ABC):
    @property
    @abstractmethod
    def registered(self) -> asyncio.Event: ...

    @abstractmethod
    async def register(self: 'Client'): ...

    @abstractmethod
    async def deregister(self: 'Client') -> str: ...


class IHttpClient(ABC):
    @property
    @abstractmethod
    def http_session(self) -> aiohttp.ClientSession: ...

    @abstractmethod
    async def send(self, message): ...


class IServerCommunicator(ABC):
    @property
    @abstractmethod
    def services(self) -> IServiceProvider: ...

    @property
    @abstractmethod
    def server(self) -> Server: ...

    @property
    @abstractmethod
    def initialized(self) -> asyncio.Event: ...

    @abstractmethod
    async def initialize(self): ...


class IServiceProvider(ABC):
    @abstractmethod
    async def server_config(self, **message) -> Server: ...
    @abstractmethod
    async def client_registration(self, **message) -> Client: ...
    @abstractmethod
    async def client_deregistration(self, **message) -> Success: ...
    @abstractmethod
    async def client_get_list(self, **message) -> ClientList: ...
    @abstractmethod
    async def device_registration(self, **message) -> Device: ...
    @abstractmethod
    async def device_deregistration(self, **message) -> Success: ...
    @abstractmethod
    async def device_get(self, **message): ...
    @abstractmethod
    async def device_get_list(self, **message): ...
    @abstractmethod
    async def pm_database_save(self, **message): ...
    @abstractmethod
    async def pm_database_delete(self, **message): ...
    @abstractmethod
    async def pm_database_get(self, **message): ...
    @abstractmethod
    async def pm_database_get_list(self, **message): ...
    @abstractmethod
    async def pm_database_online_get_list(self, **message): ...
    @abstractmethod
    async def pm_database_local_get_list(self, **message): ...
    @abstractmethod
    async def pm_runtime_add(self, **message): ...
    @abstractmethod
    async def pm_runtime_remove(self, **message): ...
    @abstractmethod
    async def pm_runtime_get(self, **message): ...
    @abstractmethod
    async def pm_runtime_get_list(self, **message): ...
    @abstractmethod
    async def session_database_save(self, **message): ...
    @abstractmethod
    async def session_database_delete(self, **message): ...
    @abstractmethod
    async def session_database_get(self, **message): ...
    @abstractmethod
    async def session_database_get_list(self, **message): ...
    @abstractmethod
    async def session_database_online_get_list(self, **message): ...
    @abstractmethod
    async def session_database_local_get_list(self, **message): ...
    @abstractmethod
    async def session_runtime_add(self, **message): ...
    @abstractmethod
    async def session_runtime_remove(self, **message): ...
    @abstractmethod
    async def session_runtime_get(self, **message): ...
    @abstractmethod
    async def session_runtime_get_list(self, **message): ...
    @abstractmethod
    async def session_runtime_start(self, **message): ...
    @abstractmethod
    async def session_runtime_stop(self, **message): ...
    @abstractmethod
    async def topic_demux_database_save(self, **message): ...
    @abstractmethod
    async def topic_demux_database_delete(self, **message): ...
    @abstractmethod
    async def topic_demux_database_get(self, **message): ...
    @abstractmethod
    async def topic_demux_database_get_list(self, **message): ...
    @abstractmethod
    async def topic_demux_runtime_get(self, **message): ...
    @abstractmethod
    async def topic_demux_runtime_get_list(self, **message): ...
    @abstractmethod
    async def topic_mux_database_save(self, **message): ...
    @abstractmethod
    async def topic_mux_database_delete(self, **message): ...
    @abstractmethod
    async def topic_mux_database_get(self, **message): ...
    @abstractmethod
    async def topic_mux_database_get_list(self, **message): ...
    @abstractmethod
    async def topic_mux_runtime_get(self, **message): ...
    @abstractmethod
    async def topic_mux_runtime_get_list(self, **message): ...
    @abstractmethod
    async def service_list(self, **message): ...
    @abstractmethod
    async def topic_list(self, **message): ...
    @abstractmethod
    async def topic_subscription(self, **message): ...


class IClientManager(ABC):
    @property
    @abstractmethod
    def clients(self) -> Dict[str, IClientNode]: ...

    @abstractmethod
    async def start_clients(self, *clients: IClientNode) -> None: ...

    @abstractmethod
    async def stop_clients(self, *clients: IClientNode) -> None: ...


class ISessionManager(ABC):
    @property
    @abstractmethod
    def sessions(self) -> Dict[str, Session]: ...

    @abstractmethod
    async def start_sessions(self, *sessions: Session) -> None: ...

    @abstractmethod
    async def stop_sessions(self, *sessions: Session) -> None: ...


class IUbiiHub(ISessionManager, IClientManager, IServerCommunicator, ABC):
    @property
    @abstractmethod
    def services(self) -> IServiceProvider: ...
